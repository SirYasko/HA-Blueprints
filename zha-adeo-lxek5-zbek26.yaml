variables:
  entity_domain_options: &entity_domain_options #Dictionary of supported entities
    - light
    - switch
    - fan
    - automation
    - scene
    - media_player
  entity_type_options: &entity_type_options #Dictionary of entity types that can be enforced
    - label: 0. Automatic (by entity domain and entity info)
      value: AUTO          
    - label: 1. White light with adjustable temperature and brightness
      value: LIGHT_COLOR_TEMP
    - label: 2. Color light with adjustable hue and saturation
      value: LIGHT_HS
    - label: 3. Light with On/Off support only
      value: LIGHT_ONOFF
    - label: 4. Switch with On/Off support only
      value: SWITCH
    - label: 5. Fan with On/Off and defined modes support
      value: FAN
    - label: 6. Automation On/Off
      value: AUTOMATION
    - label: 7. Scene On
      value: SCENE
    - label: 8. Media player On/Off/VolUp/VolDown/Start/Stop/Pause
      value: MEDIA_PLAYER
      
blueprint:
  name: SirYasko's LXEK-5/ZBEK-26 v1.7
  description: |
    Control entities via an Adeo LXEK-5/ZBEK-26 (Leroy Merlin - Lexman) remote connected trough ZHA 
    HR-C99C-Z-C045 - https://zigbee.blakadder.com/ADEO_HR-C99C-Z-C045.html
    ![Device Image](https://github.com/SirYasko/HA-Blueprints/raw/main/zha-adeo-lxek5-zbek26.png)
  source_url: https://github.com/SirYasko/HA-Blueprints/blob/main/zha-adeo-lxek5-zbek26.yaml
  domain: automation
  author: SirYasko
        
  input:
    i__debug:
      name: " "
      description: "# Debug"
      default: ""
      selector:
        qr_code:
          data: ""
          scale: 0
          error_correction_level: low 
          
    i__debug_f:
      name: (Required) Send debug notifications to HA
      description: Disabled by default
      default: false
      selector:
        boolean:
       
    i__config_desc:
      name: " "
      description: "# Entities configuration"
      default: ""
      selector:
        qr_code:
          data: ""
          scale: 0
          error_correction_level: low 
          
    i__remote:
      name: (Required) Adeo LXEK-5/ZBEK-26 remote controller
      description: Select the remote controller you wish to use.
      selector:
        device:
          filter:
            - integration: zha
              model: LXEK-5
            - integration: zha
              model: ZBEK-26

    i__entity_helper:
      name: (Required) Helper
      description: |
        Select a helper to store the currently selected entity: 
        - go to Settings -> Devices & Services -> Helpers or click [link](https://my.home-assistant.io/redirect/helpers/) 
        - add new text helper (name: any, icon: any, min length: 0, max length: 1000, mode: text, pattern regex: empty).      
      selector:
        entity:
          domain:
            - input_text
          multiple: false
  
    i__entity_1:
      name: "(Optional) Entity for [scene 1] button"
      description: |
        &#x25A0; 
      selector:
        entity:
          domain: *entity_domain_options
          multiple: false
      default: null
 
    i__entity_2:
      name: '(Optional) Entity for [scene 2] button'
      description: |
        &#x25A0; 
        &#x25A0; 
      selector:
        entity:
          domain: *entity_domain_options
          multiple: false
      default: null
 
    i__entity_3:
      name: '(Optional) Entity for [scene 3] button'
      description: |
        &#x25A0;&nbsp;&ensp;&#x25A0;
        &#x25A0;        
      selector:
        entity:
          domain: *entity_domain_options
          multiple: false
      default: null

    i__entity_4:
      name: '(Optional) Entity for [scene 4] button'
      description: |
        &#x25A0;&nbsp;&ensp;&#x25A0;
        &#x25A0;&nbsp;&ensp;&#x25A0;
      selector:
        entity:
          domain: *entity_domain_options
          multiple: false
      default: null
      
    i__entity_type_1:
      name: '(Optional) Force type of entity for [scene 1] button'
      description: 'Force the type of selected entity - use when "0. Automatic" does not work'
      selector:
        select:
          mode: dropdown 
          options: *entity_type_options
      default: AUTO
      
    i__entity_type_2:
      name: '(Optional) Force type of entity for [scene 2] button'
      description: 'Force the type of selected entity - use when "0. Automatic" does not work'
      selector:
        select:
          mode: dropdown 
          options: *entity_type_options
      default: AUTO
      
    i__entity_type_3:
      name: '(Optional) Force type of entity for [scene 3] button'
      description: 'Force the type of selected entity - use when "0. Automatic" does not work'
      selector:
        select:
          mode: dropdown 
          options: *entity_type_options
      default: AUTO

    i__entity_type_4:
      name: '(Optional) Force type of entity for [scene 4] button'
      description: 'Force the type of selected entity - use when "0. Automatic" does not work'
      selector:
        select:
          mode: dropdown 
          options: *entity_type_options
      default: AUTO
    
    i__brightness_desc:
      name: ' '
      description: '# Lights - brightness'
      default: ''
      selector:
        qr_code:
          data: ''
          scale: 0
          error_correction_level: low 
        
    i__brightness_step:
      name: (Optional) Brightness step
      description: Brightness change step.
      default: 35
      selector:
        number:
          min: 1
          max: 255
          step: 1 
          
    i__brightness_min:
      name: (Optional) Minimum brightness value
      description: Number indicating minimum brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.
      default: 5
      selector:
        number:
          min: 0
          max: 255
          step: 1 

    i__brightness_max:
      name: (Optional) Maximum brightness value
      description: Number indicating maximum brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.
      default: 255
      selector:
        number:
          min: 0
          max: 255
          step: 1 

    i__brightness_double_on:
      name: (Optional) Set maximum brightness on double on.
      description: Set the brightness (maximum brightness value) when the light is already turned on and turned on again.
      default: true
      selector:
        boolean:

    i__brightness_double_off:
      name: (Optional) Set minimum brightness on double off.
      description: Set the brightness (minimum brightness value) when the light is already turned off and turned off on again.
      default: true
      selector:
        boolean:
        
    i__brightness_transition_time:
      name: (Optional) Brightness transition time
      description: Duration it takes to get to next state.
      default: 0.5
      selector:
        number:
          min: 0
          max: 60
          step: 0.1          
          unit_of_measurement: "seconds"
 
    i__brightness_force:
      name: (Optional) Force brightness value at turn on
      description: Force brightness value when the light is being turned on.
      default: false
      selector:
        boolean:
        
    i__brightness_force_value:
      name: (Optional) Force brightness value
      description: Brightness value to force when turning on the light.
      default: 5
      selector:
        number:
          min: 0
          max: 255
          step: 1
          mode: slider
        
    i__color_desc:
      name: " "
      description: "# Lights - color temperature"
      default: ""
      selector:
        qr_code:
          data: ""
          scale: 0
          error_correction_level: low 
    
    i__color_force:
      name: (Optional) Force color temperature value at turn on
      description: Force color temperature value when the light is being turned on.
      default: false
      selector:
        boolean:
        
    i__color_force_value:
      name: (Optional) Force color temperature value at turn on
      description: Color temperature when turning on the light in mireds.
      default: 326
      selector:
        color_temp:
          min: 153
          max: 500
          unit: "mired"
          
    i__color_step:
      name: (Optional) Color temperature step
      description: Color temperature change step in mireds.
      default: 25
      selector:
        number:
          min: 1
          max: 347
          unit_of_measurement: "mireds"
         
    i__color_transition_time:
      name: (Optional) Color transition time
      description: Duration it takes to get to next state.
      default: 0.5
      selector:
        number:
          min: 0
          max: 60
          step: 0.1          
          unit_of_measurement: "seconds"

    i__hs_desc:
      name: " "
      description: "# Lights - hue & saturation"
      default: ""
      selector:
        qr_code:
          data: ""
          scale: 0
          error_correction_level: low 

    i__hue_step:
      name: (Optional) Hue Step
      description: "Hue change step."
      default: 10
      selector:
        number:
          min: 1
          max: 360
          unit_of_measurement: "degrees"
    
    i__hue_transition_time:
      name: (Optional) Hue transition time
      description: Duration it takes to get to next state.
      default: 0.5
      selector:
        number:
          min: 0
          max: 60
          step: 0.1          
          unit_of_measurement: "seconds"

    i__saturation_step:
      name: (Optional) Saturation Step
      description: "Saturation change step."
      default: 10
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "percent"    
    
    i__saturation_transition_time:
      name: (Optional) Saturation transition time
      description: Duration it takes to get to next state.
      default: 0.5
      selector:
        number:
          min: 0
          max: 60
          step: 0.1          
          unit_of_measurement: "seconds"

    # FAN
    i__fan_desc:
      name: " "
      description: "# Fans"
      default: ""
      selector:
        qr_code:
          data: ""
          scale: 0
          error_correction_level: low 
    
    i__fan_speed_min:
      name: (Optional) Minimum fan speed value
      description: Number indicating minimum fan speed, where 0 turns the fan off, 1 is the minimum speed, and 100 is the maximum speed.
      default: 0
      selector:
        number:
          min: 0
          max: 100
          step: 1 

    i__fan_speed_max:
      name: (Optional) Maximum fan speed value
      description: Number indicating maximum fan speed, where 0 turns the fan off, 1 is the minimum speed, and 100 is the maximum speed.
      default: 100
      selector:
        number:
          min: 0
          max: 100
          step: 1 
          
    i__fan_speed_increase_step:
      name: (Optional) Increasing fan speed by a percentage step
      description: Increase speed by a percentage step.
      default: 20
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "percent"   

    i__fan_speed_descrease_step:
      name: (Optional) Decreasing fan speed by a percentage step
      description: Decrease speed by a percentage step.
      default: 20
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "percent"   

mode: restart
max_exceeded: silent
    
variables:
  v__debug_f:                    !input i__debug_f
  v__entity_helper:              !input i__entity_helper 
  v__entity_1:                   !input i__entity_1
  v__entity_2:                   !input i__entity_2
  v__entity_3:                   !input i__entity_3
  v__entity_4:                   !input i__entity_4
  v__entity_type_1:              !input i__entity_type_1  
  v__entity_type_2:              !input i__entity_type_2
  v__entity_type_3:              !input i__entity_type_3 
  v__entity_type_4:              !input i__entity_type_4 
  # LIGHT BRIGHTNESS
  v__brightness_step:            !input i__brightness_step
  v__brightness_min:             !input i__brightness_min
  v__brightness_max:             !input i__brightness_max
  v__brightness_double_on:       !input i__brightness_double_on
  v__brightness_double_off:      !input i__brightness_double_off
  v__brightness_transition_time: !input i__brightness_transition_time
  v__brightness_force:           !input i__brightness_force
  v__brightness_force_value:     !input i__brightness_force_value
  # LIGHT COLOR TEMPERATURE
  v__color_force:                !input i__color_force
  v__color_force_value:          !input i__color_force_value
  v__color_step:                 !input i__color_step
  v__color_transition_time:      !input i__color_transition_time
  # HS
  v__hue_step:                   !input i__hue_step
  v__hue_transition_time:        !input i__hue_transition_time
  v__saturation_step:            !input i__saturation_step
  v__saturation_transition_time: !input i__saturation_transition_time
  # FAN
  v__fan_speed_min:              !input i__fan_speed_min
  v__fan_speed_max:              !input i__fan_speed_max
  v__fan_speed_increase_step:    !input i__fan_speed_increase_step
  v__fan_speed_descrease_step:   !input i__fan_speed_descrease_step
  
trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input i__remote
    
action:
- variables:
    v__command:         '{{ trigger.event.data.command }}'
    v__command_args0:   '{{ trigger.event.data.args[0] }}'
    v__command_args1:   '{{ trigger.event.data.args[1] }}'
    v__entity_JSON:     '{{ (states(v__entity_helper) | from_json) }}'
    v__entity:          '{{ v__entity_JSON.entity }}' 
    v__entity_type_def: '{{ v__entity_JSON.type }}'
    v__entity_domain:   >
      {% if v__entity is not none and v__entity != '' %}
        {{ v__entity.split(".")[0] }}
      {% else %}
        'unknown'
      {% endif %}   
    v__entity_info:     '{{ expand(v__entity) }}' #v__entity_state:    '{{ states[v__entity] }}'
    v__light_supported_color_mode: >
      {% set entity_id = v__entity %}
      {% if v__entity_domain == "light" %}
        {% set modes = state_attr(entity_id, 'supported_color_modes') %}
        {% if modes %}
          {% set modes_list = modes | map(attribute='value') | list %}
          {{ modes_list | join(', ') }}
        {% else %}
          None
        {% endif %}
      {% else %}
        None
      {% endif %}
    v__entity_type_auto: >
  
      {% if v__entity_type_def == "AUTO" %}  
        {% if v__entity_domain == "light" and v__light_supported_color_mode in ("onoff", "brightness", "color_temp", "hs") %}
          {{ (v__entity_domain + '_' + v__light_supported_color_mode) | upper }}
        {% else %}
          {{ v__entity_domain | upper }}
        {% endif %}
      {% else %}
        {{ v__entity_domain | upper }}
      {% endif %}
    v__entity_type: '{{ v__entity_type_auto }}'
        
# DEBUG  
- choose:
  - conditions:
    - condition: template
      value_template: '{{ v__debug_f == true }}' 
    sequence:
      - service: persistent_notification.create
        data:
          title: 'Parameters'
          message: |
             v__command:            {{v__command}}; 
             v__command_args0:      {{v__command_args0}}; 
             v__command_args1:      {{v__command_args1}};
             _________________________________________________________________
             v__entity_1:           {{v__entity_1}}; 
             v__entity_2:           {{v__entity_2}}; 
             v__entity_3:           {{v__entity_3}}; 
             v__entity_4:           {{v__entity_4}}; 
             v__entity_type_1:      {{v__entity_type_1}};  
             v__entity_type_2:      {{v__entity_type_2}};
             v__entity_type_3:      {{v__entity_type_3}}; 
             v__entity_type_4:      {{v__entity_type_4}}; 
             _________________________________________________________________
             v__entity_JSON:        {{v__entity_JSON}};   
             v__entity:             {{v__entity}}; 
             v__entity_domain:      {{v__entity_domain}};
             v__entity_type_def:    {{v__entity_type_def}}; 
             v__entity_info:        {{v__entity_info}};
             v__entity_type_auto:   {{v__entity_type_auto}};
             v__entity_type:        {{v__entity_type}};
             ______________________________________________________________
             v__light_supported_color_mode: {{v__light_supported_color_mode}};
  
- choose:
#####################################################        
# ENTITIES                                          #
#####################################################
  - conditions:  
    - condition: template
      value_template: '{{ v__command == "view" }}'
    sequence:
      - choose: 
       
        - conditions: #SCENE1
          - condition: template
            value_template: '{{ v__command == "view" and v__command_args1 == 10 and v__entity_1 | length > 0}}'
          sequence:
            - service: input_text.set_value
              data:
                entity_id: '{{ v__entity_helper }}'
                value: '{{ {"entity": v__entity_1, "type": v__entity_type_1} | tojson }}'
       
        - conditions: #SCENE2
          - condition: template
            value_template: '{{ v__command == "view" and v__command_args1 == 11 and v__entity_2 | length > 0 }}'
          sequence:
            - service: input_text.set_value
              data:
                entity_id: '{{ v__entity_helper }}'
                value: '{{ {"entity": v__entity_2, "type": v__entity_type_2} | tojson }}'
       
        - conditions: #SCENE3
          - condition: template
            value_template: '{{ v__command == "view" and v__command_args1 == 12 and v__entity_3 | length > 0 }}'
          sequence:
            - service: input_text.set_value
              data:
                entity_id: '{{ v__entity_helper }}'
                value: '{{ {"entity": v__entity_3, "type": v__entity_type_3} | tojson }}'
       
        - conditions: #SCENE4 
          - condition: template
            value_template: '{{ v__command == "view" and v__command_args1 == 13 and v__entity_4 | length > 0 }}'
          sequence:
            - service: input_text.set_value
              data:
                entity_id: '{{ v__entity_helper }}'
                value: '{{ {"entity": v__entity_4, "type": v__entity_type_4} | tojson }}'
      
#####################################################
# LIGHTS                                            #
#####################################################
  - conditions:  
    - condition: template
      value_template: '{{ v__entity_type.startswith("LIGHT") }}'
    sequence:
      - choose:    

        - conditions: #ON 
          - condition: template
            value_template: '{{ v__command == "on" and v__entity_type in ("LIGHT_COLOR_TEMP") }}'
          sequence:
          - variables:
              v__current_brightness: '{{ (state_attr(v__entity, "brightness") or 0 ) | int }}'
              v__brightness: '{% if v__brightness_force and v__current_brightness == 0  %} {{ v__brightness_force_value | int }} {% elif v__brightness_double_on and v__current_brightness > 0%} {{ v__brightness_max | int }} {% else %} none {% endif %}'
              v__transition: '{% if v__brightness_transition_time %} {{ v__brightness_transition_time }} {% else %} none {% endif %}' 
              v__color_temp: '{% if v__color_force %} {{ v__color_force_value | int }} {% else %} none {% endif %}'
              v__data: >
                {
                {% if v__brightness | is_number %}
                "brightness": "{{ v__brightness }}",
                {% endif %}
                {% if v__color_temp | is_number %}
                "color_temp": "{{ v__color_temp }}",
                {% endif %}
                {% if v__transition | is_number %}
                "transition": "{{ v__transition }}",
                {% endif %}
                }
          - service: '{{ v__entity_domain }}.turn_on'
            target:
             entity_id: '{{ v__entity }}'
            data: '{{ v__data }}'
      
        - conditions: #ON 
          - condition: template
            value_template: '{{ v__command == "on" and v__entity_type in ("LIGHT_ONOFF", "LIGHT_HS") }}'
          sequence:
          - service: '{{ v__entity_domain }}.turn_on'
            target:
             entity_id: '{{ v__entity }}'       
       
        - conditions: #OFF - off when brightness > 0
          - condition: template
            value_template: '{{ v__command == "off" and v__entity_type in ("LIGHT_COLOR_TEMP") and (state_attr(v__entity, "brightness") or 0 ) | int > 0 }}'
          sequence:
          - service: light.turn_off
            target:
              entity_id: '{{ v__entity }}'
      
        - conditions: #OFF - on when double off
          - condition: template
            value_template: '{{ v__command == "off" and v__entity_type in ("LIGHT_COLOR_TEMP") and (state_attr(v__entity, "brightness") or 0 ) | int == 0 and v__brightness_double_off == true }}'
          sequence:
          - service: '{{ v__entity_domain }}.turn_on'
            target:
              entity_id: '{{ v__entity }}'
            data:
              brightness: '{{ v__brightness_min }}'
      
        - conditions: #OFF 
          - condition: template
            value_template: '{{ v__command == "off" and v__entity_type in ("LIGHT_ONOFF", "LIGHT_HS") }}'
          sequence:
          - service: '{{ v__entity_domain }}.turn_off'
            target:
              entity_id: '{{ v__entity }}' 
           
        - conditions: #UP - increase light brightness 
          - condition: template
            value_template: '{{ v__command == "step" and v__command_args0 == "StepMode.Up" and v__entity_type in ("LIGHT_COLOR_TEMP", "LIGHT_HS") }}'
          sequence:
          - variables:
              v__current_brightness: '{{ (state_attr(v__entity, "brightness")) | int }}'       
          - service: '{{ v__entity_domain }}.turn_on'
            target:
              entity_id: '{{ v__entity }}'
            data:
              brightness: >
                {% if v__current_brightness + v__brightness_step >= v__brightness_max %}
                {{ v__brightness_max }}
                {% else %}
                {{ v__current_brightness + v__brightness_step }}
                {% endif %}
              transition: '{{ v__brightness_transition_time }}'
          
        - conditions: #DOWN - decrease light brightness 
          - condition: template
            value_template: '{{ v__command == "step" and v__command_args0 == "StepMode.Down" and v__entity_type in ("LIGHT_COLOR_TEMP", "LIGHT_HS") }}'
          sequence:
          - variables:
              v__current_brightness: '{{ (state_attr(v__entity, "brightness")) | int }}'    
          - service: '{{ v__entity_domain }}.turn_on'
            target:
              entity_id: '{{ v__entity }}'
            data:
              brightness: >
                {% if v__current_brightness <= v__brightness_step %}
                {{ v__brightness_min }}
                {% else %}
                {{ v__current_brightness | int - v__brightness_step }}
                {% endif %}
              transition: '{{ v__brightness_transition_time }}'
          
        - conditions: #DP-UP RED - higher color temperature 
          - condition: template
            value_template: '{{ v__command == "step_color_temp" and v__command_args0 == "StepMode.Up" and v__entity_type in ("LIGHT_COLOR_TEMP") }}'
          sequence:
          - variables:
              v__current_color_temp: '{{ (state_attr(v__entity, "color_temp")) | int }}'
          - service: '{{ v__entity_domain }}.turn_on'
            target:
              entity_id: '{{ v__entity }}'
            data:
              color_temp: >
                {% if v__current_color_temp + v__color_step > 500 %}
                {{ 500 }}
                {% else %}
                {{ v__current_color_temp + v__color_step }}
                {% endif %}
              transition: '{{ v__color_transition_time }}'
               
        - conditions: #DP-DOWN RED - lower color temperature     
          - condition: template
            value_template: '{{ v__command == "step_color_temp" and v__command_args0 == "StepMode.Down" and v__entity_type in ("LIGHT_COLOR_TEMP") }}'
          sequence:
          - variables:
              v__current_color_temp: '{{ (state_attr(v__entity, "color_temp")) | int }}'    
          - service: '{{ v__entity_domain }}.turn_on'
            target:
              entity_id: '{{ v__entity }}'
            data:
              color_temp: >
                {% if v__current_color_temp - v__color_step < 153 %}
                {{ 153 }}
                {% else %}
                {{ v__current_color_temp - v__color_step }}
                {% endif %}
              transition: '{{ v__color_transition_time }}'
            
        - conditions: #DP-UP GREEN - higher color saturation 
          - condition: template
            value_template: '{{ v__command == "step_saturation" and v__command_args0 == "StepMode.Up" and v__entity_type in ("LIGHT_HS") }}'
          sequence:
          - variables:
              v__current_hue:         '{{ state_attr(v__entity, "hs_color")[0] | int }}'
              v__current_saturation:  '{{ state_attr(v__entity, "hs_color")[1] | int }}'
              v__new_saturation:      '{% if (v__current_saturation + v__saturation_step) >= 100 %} {{ 100 }} {% else %} {{ v__current_saturation + v__saturation_step }} {% endif %}'
          - service: '{{ v__entity_domain }}.turn_on'
            target:
              entity_id: '{{ v__entity }}'
            data:
              hs_color: ['{{ v__current_hue }}', '{{ v__new_saturation }}']
              transition: '{{ v__saturation_transition_time }}'
                    
        - conditions: #DP-DOWN GREEN - lower color saturation 
          - condition: template
            value_template: '{{ v__command == "step_saturation" and v__command_args0 == "StepMode.Down" and v__entity_type in ("LIGHT_HS") }}'
          sequence:
          - variables:
              v__current_hue:         '{{ state_attr(v__entity, "hs_color")[0] | int }}'
              v__current_saturation:  '{{ state_attr(v__entity, "hs_color")[1] | int }}'
              v__new_saturation:      '{% if (v__current_saturation - v__saturation_step) < 0 %} {{ 0 }} {% else %} {{ v__current_saturation - v__saturation_step }} {% endif %}'
          - service: '{{ v__entity_domain }}.turn_on'
            target:
              entity_id: '{{ v__entity }}'
            data:
              hs_color: ['{{ v__current_hue }}', '{{ v__new_saturation }}']
              transition: '{{ v__saturation_transition_time }}'
            
        - conditions: #DP-LEFT GREEN - higher color hue 
          - condition: template
            value_template: '{{ v__command == "step_hue" and v__command_args0 == "StepMode.Down" and v__entity_type in ("LIGHT_HS") }}'
          sequence:
          - variables:
              v__current_hue:         '{{ state_attr(v__entity, "hs_color")[0] | int }}'
              v__current_saturation:  '{{ state_attr(v__entity, "hs_color")[1] | int }}'   
              v__new_hue:             '{{ (v__current_hue + v__hue_step) % 360 }}'
          - service: '{{ v__entity_domain }}.turn_on'
            target:
              entity_id: '{{ v__entity }}'
            data:
              hs_color: ['{{ v__new_hue }}', '{{ v__current_saturation }}']
              transition: '{{ v__hue_transition_time }}'
              
        - conditions: #DP-RIGHT GREEN - lower color hue 
          - condition: template
            value_template: '{{ v__command == "step_hue" and v__command_args0 == "StepMode.Up" and v__entity_type in ("LIGHT_HS") }}'
          sequence:
          - variables:
              v__current_hue:         '{{ state_attr(v__entity, "hs_color")[0] | int }}'
              v__current_saturation:  '{{ state_attr(v__entity, "hs_color")[1] | int }}'
              v__new_hue:             '{% if (v__current_hue - v__hue_step) < 0 %} {{ 360 + (v__current_hue - v__hue_step) }} {% else %} {{ (v__current_hue - v__hue_step) }} {% endif %}'
          - service: '{{ v__entity_domain }}.turn_on'
            target:
              entity_id: '{{ v__entity }}'
            data:
              hs_color: ['{{ v__new_hue }}', '{{ v__current_saturation }}']
              transition: '{{ v__hue_transition_time }}'
      
#####################################################
# FANS                                              #
#####################################################
  - conditions: 
    - condition: template
      value_template: '{{ v__entity_type in ("FAN") }}'
    sequence:
      - choose:
    
        - conditions: #ON 
          - condition: template
            value_template: '{{ v__command == "on"}}'
          sequence:
          - service: '{{ v__entity_domain }}.turn_on'
            target:
             entity_id: '{{ v__entity }}'     
      
        - conditions: #OFF  
          - condition: template
            value_template: '{{ v__command == "off" }}'
          sequence:
          - service: '{{ v__entity_domain }}.turn_off'
            target:
              entity_id: '{{ v__entity }}'            
      
        - conditions: #UP
          - condition: template
            value_template: '{{ v__command == "step" and v__command_args0 == "StepMode.Up" }}' 
          sequence:
          - variables:
              v__current_fan_speed: '{{ (state_attr(v__entity, "percentage")) | int }}'
          - service: '{{ v__entity_domain }}.set_percentage'
            target:
              entity_id: '{{ v__entity }}' 
            data:
              percentage: >
                {% if v__current_fan_speed + v__fan_speed_increase_step >= v__fan_speed_max %}
                {{ v__fan_speed_max }}
                {% else %}
                {{ v__current_fan_speed + v__fan_speed_increase_step }}
                {% endif %}               
      
        - conditions: #DOWN
          - condition: template
            value_template: '{{ v__command == "step" and v__command_args0 == "StepMode.Down" }}'
          sequence:
          - variables:
              v__current_fan_speed: '{{ (state_attr(v__entity, "percentage")) | int }}'
          - service: '{{ v__entity_domain }}.set_percentage'
            target:
              entity_id: '{{ v__entity }}' 
            data:
              percentage: >
                {% if v__current_fan_speed - v__fan_speed_descrease_step <= v__fan_speed_min %}
                {{ v__fan_speed_min }}
                {% else %} 
                {{ v__current_fan_speed - v__fan_speed_descrease_step }}
                {% endif %}
                      
        - conditions: #DP-UP RED  
          - condition: template
            value_template: '{{ v__command == "step_color_temp" and v__command_args0 == "StepMode.Up" }}'
          sequence:
          - variables:
              v__current_fan_mode: '{{ state_attr(v__entity, "preset_mode") }}'
          - service: '{{ v__entity_domain }}.set_preset_mode'
            target:
              entity_id: '{{ v__entity }}'
            data:
              preset_mode: >
                {% set modes = state_attr(v__entity, 'preset_modes') %}
                {% set current_index = modes.index(v__current_fan_mode) %}
                {% set next_index = (current_index + 1) % modes | length %}
                {{ modes[next_index] }}
            
        - conditions: #DP-DOWN RED 
          - condition: template
            value_template: '{{ v__command == "step_color_temp" and v__command_args0 == "StepMode.Down" }}'
          sequence:
          - variables:
              v__current_fan_mode: '{{ state_attr(v__entity, "preset_mode") }}'
          - service: '{{ v__entity_domain }}.set_preset_mode'
            target:
              entity_id: '{{ v__entity }}'
            data:
              preset_mode: >
                {% set modes = state_attr(v__entity, 'preset_modes') %}
                {% set current_index = modes.index(v__current_fan_mode) %}
                {% set prev_index = (current_index - 1) % modes | length %}
                {{ modes[prev_index] }}
      
#####################################################
# SWITCHES                                          #
#####################################################
  - conditions:
    - condition: template
      value_template: '{{ v__entity_type == "SWITCH" }}'
    sequence:
      - choose:

        - conditions: #ON
            - condition: template
              value_template: '{{ v__command == "on" }}'
          sequence:
            - service: '{{ v__entity_domain }}.turn_on'
              target:
                entity_id: '{{ v__entity }}'

        - conditions: #OFF
            - condition: template
              value_template: '{{ v__command == "off" }}'
          sequence:
            - service: '{{ v__entity_domain }}.turn_off'
              target:
                entity_id: '{{ v__entity }}'

#####################################################
# AUTOMATIONS                                       #
#####################################################
  - conditions:
    - condition: template
      value_template: '{{ v__entity_type == "AUTOMATION" }}'
    sequence:
      - choose:
      
        - conditions: #ON
            - condition: template
              value_template: '{{ v__command == "on" }}'
          sequence:
            - service: '{{ v__entity_domain }}.turn_on'
              target:
                entity_id: '{{ v__entity }}'
             
        - conditions: #OFF 
            - condition: template
              value_template: '{{ v__command == "off" }}'
          sequence:
            - service: '{{ v__entity_domain }}.turn_off'
              target:
                entity_id: '{{ v__entity }}'
        
        - conditions: #UP / DOWN - trigger
            - condition: template
              value_template: '{{ v__command == "step" and v__command_args0 in ("StepMode.Up", "StepMode.Down") }}' 
          sequence:
            - service: '{{ v__entity_domain }}.trigger'
              target:
                entity_id: '{{ v__entity }}' 

#####################################################
# SCENES                                            #
#####################################################
  - conditions:
    - condition: template
      value_template: '{{ v__entity_type == "SCENE" }}'
    sequence:
      - choose:
      
        - conditions: #ON
          - condition: template
            value_template: '{{ v__command == "on" }}'
          sequence:
          - service: '{{ v__entity_domain }}.turn_on'
            target:
             entity_id: '{{ v__entity }}'

#####################################################
# MEDIA_PLAYER                                      #
#####################################################
  - conditions:
    - condition: template
      value_template: '{{ v__entity_type == "MEDIA_PLAYER" }}'
    sequence:
      - choose:
      
        - conditions: #ON
          - condition: template
            value_template: '{{ v__command == "on" }}'
          sequence:
          - service: '{{ v__entity_domain }}.turn_on'
            target:
             entity_id: '{{ v__entity }}'

        - conditions: #OFF
          - condition: template
            value_template: '{{ v__command == "off" }}'
          sequence:
          - service: '{{ v__entity_domain }}.turn_off'
            target:
             entity_id: '{{ v__entity }}'
        
        - conditions: #UP - volume up
            - condition: template
              value_template: '{{ v__command == "step" and v__command_args0 in ("StepMode.Up") }}' 
          sequence:
            - service: '{{ v__entity_domain }}.volume_up'
              target:
                entity_id: '{{ v__entity }}' 

        - conditions: #DOWN - volume down
            - condition: template
              value_template: '{{ v__command == "step" and v__command_args0 in ("StepMode.Down") and v__command_args1 != 254 }}' 
          sequence:
            - service: '{{ v__entity_domain }}.volume_down'
              target:
                entity_id: '{{ v__entity }}' 
        
        - conditions: #LP-DOWN - long press - mute
            - condition: template
              value_template: '{{ v__command == "step" and v__command_args0 in ("StepMode.Down") and v__command_args1 == 254 }}' 
          sequence:
            - service: '{{ v__entity_domain }}.volume_mute'
              target:
                entity_id: '{{ v__entity }}' 
                
        - conditions: #DP-UP RED - Play media
            - condition: template
              value_template: '{{ v__command == "step_color_temp" and v__command_args0 in ("StepMode.Down") }}' 
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: '{{ states(v__entity) == "playing" }}'
                  sequence:
                    - service: '{{ v__entity_domain }}.media_pause'
                      target:
                        entity_id: '{{ v__entity }}'
                - conditions:
                    - condition: template
                      value_template: '{{ states(v__entity) != "playing" }}'
                  sequence:
                    - service: '{{ v__entity_domain }}.media_play'
                      target:
                        entity_id: '{{ v__entity }}'
                        
        - conditions: #DP-DOWN RED - Stop media
            - condition: template
              value_template: '{{ v__command == "step_color_temp" and v__command_args0 in ("StepMode.Up") }}' 
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: '{{ states(v__entity) == "playing" }}'
                  sequence:
                    - service: '{{ v__entity_domain }}.media_stop'
                      target:
                        entity_id: '{{ v__entity }}'

        - conditions: #DP-RIGHT GREEN - next track 
          - condition: template
            value_template: '{{ v__command == "step_hue" and v__command_args0 == "StepMode.Up" }}'
          sequence:
          - service: '{{ v__entity_domain }}.media_next_track'
            target:
              entity_id: '{{ v__entity }}'
 
        - conditions: #DP-LEFT GREEN - previous track 
          - condition: template
            value_template: '{{ v__command == "step_hue" and v__command_args0 == "StepMode.Down"  }}'
          sequence:
          - service: '{{ v__entity_domain }}.media_previous_track'
            target:
              entity_id: '{{ v__entity }}'

        - conditions: #DP-UP GREEN - next source
          - condition: template
            value_template: '{{ v__command == "step_saturation" and v__command_args0 == "StepMode.Up" }}'
          sequence:
          - variables:
              v__available_sources:    >-
                {% set source_list = state_attr(v__entity, "source_list") %}
                {% if source_list is defined and source_list %}
                    {{ source_list }}
                {% else %}
                    []
                {% endif %}
              v__current_source:       '{{ state_attr(v__entity, "source") }}'
              v__current_source_index: >-
                {% if v__current_source in v__available_sources %}
                    {{ v__available_sources.index(v__current_source) }}
                {% else %}
                    -1
                {% endif %}
          - service: '{{ v__entity_domain }}.select_source'
            target:
              entity_id: '{{ v__entity }}'
            data:
              source: >-
                  {% if v__available_sources %}
                    {{ v__available_sources[(v__current_source_index + 1) % v__available_sources | length] }}
                  {% endif %}
 
        - conditions: #DP-DOWN GREEN - previous source
          - condition: template
            value_template: '{{ v__command == "step_saturation" and v__command_args0 == "StepMode.Down"  }}'
          sequence:
          - variables:
              v__available_sources:    >-
                {% set source_list = state_attr(v__entity, "source_list") %}
                {% if source_list is defined and source_list %}
                    {{ source_list }}
                {% else %}
                    []
                {% endif %}
              v__current_source:       '{{ state_attr(v__entity, "source") }}'
              v__current_source_index: >-
                {% if v__current_source in v__available_sources %}
                    {{ v__available_sources.index(v__current_source) }}
                {% else %}
                    -1
                {% endif %}
          - service: '{{ v__entity_domain }}.select_source'
            target:
              entity_id: '{{ v__entity }}'
            data:
              source: >-
                  {% if v__available_sources %}
                    {{ v__available_sources[(v__current_source_index - 1) % v__available_sources | length] }}
                  {% endif %}            

  default: []


