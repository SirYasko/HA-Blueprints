blueprint:
  name: SirYasko's aquarium & terrarium lighting control v2.0.0
  description: |
    Automated aquarium and terrarium lighting control with smooth transitions of brightness and color temperature between start, peak, and end times.
    Easily configure your lighting schedule to create a smooth and realistic lighting effect that closely follows the natural rhythm of daylight.

    Like what I do? Fuel my change with a coffee!
    [!["Buy Me A Coffee"](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/siryasko)
  source_url: https://github.com/SirYasko/HA-Blueprints/blob/main/aquarium.yaml
  domain: automation
  author: SirYasko
  homeassistant:
    min_version: 2024.6.0

  input:
    section_debug:
      name: "## Debugging and error detection"
      icon: mdi:bug-outline
      description: "Enable when you know what you're doing - helpful for error detection and debugging"
      collapsed: true
      input:
        i__debug_f:
          name: Send debug notifications to HA
          description: Disabled by default
          default: false
          selector:
            boolean: {}

    section_entity_config:
      name: "## Entities configuration"
      icon: mdi:cog
      description: "Select your light source to control"
      collapsed: false
      input:
        i__entity_id:
          name: Light source
          description: >
            Select the light source you want to control. It can be a single light or a group of lights.
            Lights have to support brightness and color temperature control.
            If you select a group of lights, the automation will apply the same settings to all lights in the group.
          selector:
            # target:
            #   entity:
            #     domain: light
            entity:
              multiple: false
              filter:
                domain: light

    section_schedule:
      name: "## Schedule"
      icon: mdi:calendar-clock
      description: "Select the days of the week when the automation should be active. If no days are selected, the automation will not run."
      collapsed: false
      input:
        i__days_of_week:
          name: Days of the week
          description: "Select the days of the week when the automation should be active."
          default:
            - monday
            - tuesday
            - wednesday
            - thursday
            - friday
            - saturday
            - sunday
          selector:
            select:
              multiple: true
              options:
                - value: monday
                  label: Monday
                - value: tuesday
                  label: Tuesday
                - value: wednesday
                  label: Wednesday
                - value: thursday
                  label: Thursday
                - value: friday
                  label: Friday
                - value: saturday
                  label: Saturday
                - value: sunday
                  label: Sunday

    section_start_config:
      name: "## Start parameters"
      icon: mdi:clock-start
      description: ""
      collapsed: false
      input:
        i__start_time:
          name: Start time
          default: "08:00:00"
          selector:
            time: {}
        i__start_brightness_percent:
          name: Brightness (1–100%)
          description: |
            Number indicating brightness at the start of time.
            1% = minimum brightness / 100% = maximum brightness.
          default: 1
          selector:
            number:
              min: 1
              max: 100
              step: 1
        i__start_color_temp_kelvin:
          name: Color temperature (kelvins)
          description: |
            Number indicating color temperature in kelvins at the start of time.
            Higher color temperature [K] = colder white / Lower color temperature [K] = warmer white. 
            **Default:** 2700K (warm white)
            **Note:** It may vary depending on the type of light. If you're unsure, enable debug mode and check the min_color_temp_kelvin and max_color_temp_kelvin values. Bad or exceeded values ​​may be ignored by the device and then it seems that the blueprint does not work properly.
          default: 2700
          selector:
            color_temp:
              unit: "kelvin"
              min: 1200
              max: 9000

    section_peak_config:
      name: "## peak parameters"
      icon: mdi:sun-clock-outline
      description: ""
      collapsed: false
      input:
        i__peak_time:
          name: Peak time start
          default: "12:00:00"
          selector:
            time: {}
        i__peak_time_end:
          name: Peak time end
          default: "14:00:00"
          selector:
            time: {}
        i__peak_brightness_percent:
          name: Brightness (1–100%)
          description: |
            Number indicating brightness at the peak of time.
            1% = minimum brightness / 100% = maximum brightness.
          default: 100
          selector:
            number:
              min: 1
              max: 100
              step: 1
        i__peak_color_temp_kelvin:
          name: Color temperature (kelvins)
          description: |
            Number indicating color temperature in kelvins at the peak of time.
            Higher color temperature [K] = colder white / Lower color temperature [K] = warmer white.
            **Default:** 6500K (cool white)
            **Note:** It may vary depending on the type of light. If you're unsure, enable debug mode and check the min_color_temp_kelvin and max_color_temp_kelvin values. Bad or exceeded values ​​may be ignored by the device and then it seems that the blueprint does not work properly.
          default: 6500
          selector:
            color_temp:
              unit: "kelvin"
              min: 1200
              max: 9000

    section_end_config:
      name: "## End parameters"
      icon: mdi:clock-end
      description: ""
      collapsed: false
      input:
        i__end_time:
          name: End time
          default: "22:00:00"
          selector:
            time: {}
        i__end_brightness_percent:
          name: Brightness (1–100%)
          description: |
            Number indicating brightness at the end of time.
            1% = minimum brightness / 100% = maximum brightness.
          default: 1
          selector:
            number:
              min: 1
              max: 100
              step: 1
        i__end_color_temp_kelvin:
          name: Color temperature (kelvins)
          description: |
            Number indicating color temperature in kelvins at the end of time.
            Higher color temperature [K] = colder white / Lower color temperature [K] = warmer white.
            **Default:** 2700K (warm white)
            **Note:** It may vary depending on the type of light. If you're unsure, enable debug mode and check the min_color_temp_kelvin and max_color_temp_kelvin values. Bad or exceeded values ​​may be ignored by the device and then it seems that the blueprint does not work properly.
          default: 2700
          selector:
            color_temp:
              unit: "kelvin"
              min: 1200
              max: 9000

    section_other_config:
      name: "## Other parameters"
      icon: mdi:tune
      description: ""
      collapsed: true
      input:
        i__transition_step:
          name: Transition time (seconds)
          default: 45
          selector:
            number:
              min: 0
              max: 59
              step: 0.1
              unit_of_measurement: "seconds"

mode: restart
max_exceeded: silent

trigger:
  - platform: time_pattern
    minutes: /1

variables:
  v__debug_f: !input i__debug_f
  v__days_of_week: !input i__days_of_week
  v__start_time: !input i__start_time
  v__start_brightness_percent: !input i__start_brightness_percent
  v__start_color_temp_kelvin: !input i__start_color_temp_kelvin
  v__peak_time: !input i__peak_time
  v__peak_time_end: !input i__peak_time_end
  v__peak_brightness_percent: !input i__peak_brightness_percent
  v__peak_color_temp_kelvin: !input i__peak_color_temp_kelvin
  v__end_time: !input i__end_time
  v__end_brightness_percent: !input i__end_brightness_percent
  v__end_color_temp_kelvin: !input i__end_color_temp_kelvin
  v__transition_step: !input i__transition_step
  v__entity_id: !input i__entity_id
  v__light_info: "{{ expand(v__entity_id) | map(attribute='attributes') | list }}"

  # Current states
  v__light_current_state_on: >
    {% set entity_id = v__entity_id if v__entity_id is defined else None %}
    {% if entity_id %}
      {{ is_state(entity_id, 'on') }}
    {% else %}
      false
    {% endif %}
  v__light_current_state_brightness: "{{ state_attr(v__entity_id, 'brightness') | tojson }}"
  v__light_current_state_color_temp_kelvin: "{{ state_attr(v__entity_id, 'color_temp_kelvin') | tojson }}"
  v__light_current_state_min_color_temp_kelvin: "{{ state_attr(v__entity_id, 'min_color_temp_kelvin') | tojson }}"
  v__light_current_state_max_color_temp_kelvin: "{{ state_attr(v__entity_id, 'max_color_temp_kelvin') | tojson }}"
  v__light_current_state_color_mode: "{{ state_attr(v__entity_id, 'color_mode') | tojson }}"
  v__light_current_state_supported_color_modes: "{{ state_attr(v__entity_id, 'supported_color_modes') | tojson }}"

  #Time calculations
  v__day_of_week: "{{ now().strftime('%A') | lower }}"
  v__is_active_day: "{{ v__day_of_week in v__days_of_week }}"
  v__now: "{{ now() | as_datetime }}"
  v__s_raw: "{{ today_at(v__start_time) | as_datetime }}"
  v__p_raw: "{{ today_at(v__peak_time) | as_datetime }}"
  v__pe_raw: "{{ today_at(v__peak_time_end) | as_datetime }}"
  v__e_raw: "{{ today_at(v__end_time) | as_datetime }}"

  v__s: "{{ v__s_raw | as_datetime }}"
  v__p: "{{ v__p_raw | as_datetime if v__p_raw | as_datetime >= v__s_raw | as_datetime else (v__p_raw | as_datetime + timedelta(days=1)) }}"
  v__pe: "{{ v__pe_raw | as_datetime if v__pe_raw | as_datetime >= v__p_raw | as_datetime else (v__pe_raw | as_datetime + timedelta(days=1)) }}"
  v__e: "{{ v__e_raw | as_datetime if v__e_raw | as_datetime > v__s_raw | as_datetime else (v__e_raw | as_datetime + timedelta(days=1)) }}"

  v__total_minutes: "{{ ((v__e | as_datetime - v__s | as_datetime).total_seconds() / 60) | int }}"
  v__minutes_since_start: >
    {% if v__now | as_datetime < v__s | as_datetime and (v__s | as_datetime - v__now | as_datetime).total_seconds() > 12 * 3600 %}
      {% set v__s_adj = v__s | as_datetime - timedelta(days=1) %}
    {% else %}
      {% set v__s_adj = v__s | as_datetime %}
    {% endif %}
    {{ ((v__now | as_datetime - v__s_adj | as_datetime).total_seconds() / 60) | int }}
  v__peak_minutes: "{{ ((v__p | as_datetime - v__s | as_datetime ).total_seconds() / 60) | int }}"
  v__peak_end_minutes: "{{ ((v__pe | as_datetime - v__s | as_datetime ).total_seconds() / 60) | int }}"

  v__brightness_percent: >
    {% if v__now < v__s or v__now >= v__e %}
      {{ v__end_brightness_percent }}
    {% elif v__minutes_since_start <= v__peak_minutes %}
      {{ (v__start_brightness_percent + (v__peak_brightness_percent - v__start_brightness_percent) * (v__minutes_since_start / v__peak_minutes)) }}
    {% elif v__minutes_since_start <= v__peak_end_minutes %}
      {{ v__peak_brightness_percent }}
    {% else %}
      {{ (v__peak_brightness_percent + (v__end_brightness_percent - v__peak_brightness_percent) * ((v__minutes_since_start - v__peak_end_minutes) / (v__total_minutes - v__peak_end_minutes))) }}
    {% endif %}
  v__brightness: >
    {% set percent = [1, [v__brightness_percent, 100]|min]|max %}
    {{ (percent * 2.55) | round(0) | int }}
  v__color_temp_kelvin: >
    {% if v__now < v__s or v__now >= v__e %}
      {{ v__end_color_temp_kelvin }}
    {% elif v__minutes_since_start <= v__peak_minutes %}
      {{ (v__start_color_temp_kelvin + (v__peak_color_temp_kelvin - v__start_color_temp_kelvin) * (v__minutes_since_start / v__peak_minutes)) | round(0) | int }}
    {% elif v__minutes_since_start <= v__peak_end_minutes %}
      {{ v__peak_color_temp_kelvin }}
    {% else %}
      {{ (v__peak_color_temp_kelvin + (v__end_color_temp_kelvin - v__peak_color_temp_kelvin) * ((v__minutes_since_start - v__peak_end_minutes) / (v__total_minutes - v__peak_end_minutes))) | round(0) | int }}
    {% endif %}

action:
  # Send debug notification if enabled
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ v__debug_f == true }}"
        sequence:
          - service: persistent_notification.create
            data:
              title: "Parameters - config & entity"
              message: |
                **Entity**
                v__entity_id:    {{ v__entity_id | tojson }}
                v__light_info:   {{ v__light_info }}
                _____________________________________________________________
                **Configuration**
                v__days_of_week:              {{ v__days_of_week }}
                v__start_time:                {{ v__start_time }}
                v__peak_time:                 {{ v__peak_time }} 
                v__end_time:                  {{ v__end_time }}
                v__start_brightness_percent:  {{ v__start_brightness_percent }}
                v__peak_brightness_percent:   {{ v__peak_brightness_percent }}
                v__end_brightness_percent:    {{ v__end_brightness_percent }}
                v__start_color_temp_kelvin:   {{ v__start_color_temp_kelvin }}
                v__peak_color_temp_kelvin:    {{ v__peak_color_temp_kelvin }}
                v__end_color_temp_kelvin:     {{ v__end_color_temp_kelvin }}
                v__transition_step:           {{ v__transition_step }}
                _____________________________________________________________
                **Current states (before execution)**             
                v__light_current_state_on :                   {{ v__light_current_state_on }}
                v__light_current_state_brightness:            {{ v__light_current_state_brightness }}
                v__light_current_state_color_temp_kelvin:     {{ v__light_current_state_color_temp_kelvin }}
                v__light_current_state_min_color_temp_kelvin: {{ v__light_current_state_min_color_temp_kelvin }}
                v__light_current_state_max_color_temp_kelvin: {{ v__light_current_state_max_color_temp_kelvin }}
                v__light_current_state_color_mode:            {{ v__light_current_state_color_mode }}
                v__light_current_state_supported_color_modes: {{ v__light_current_state_supported_color_modes }}
                _____________________________________________________________
                **Calculations and new settings**
                v__day_of_week:         {{ v__day_of_week }}
                v__is_active_day:       {{ v__is_active_day }} 
                v__now:                 {{ v__now }}
                v__s:                   {{ v__s }}
                v__p:                   {{ v__p }}  
                v__e:                   {{ v__e }}
                v__total_minutes:       {{ v__total_minutes }}
                v__minutes_since_start: {{ v__minutes_since_start }}
                v__peak_minutes:        {{ v__peak_minutes }}
                v__brightness_percent:  {{ v__brightness_percent }} 
                v__brightness:          {{ v__brightness }}
                v__color_temp_kelvin:   {{ v__color_temp_kelvin }}
  # Main lighting logic
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ v__is_active_day and v__now | as_datetime > v__e | as_datetime and v__light_current_state_on  == true}}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: "{{ v__entity_id }}"
            data:
              transition: "{{v__transition_step}}"
          - delay: "00:00:00.1"

      - conditions:
          - condition: template
            value_template: "{{ v__is_active_day and v__now | as_datetime < v__s | as_datetime and v__light_current_state_on  == true }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: "{{ v__entity_id }}"
            data:
              transition: "{{v__transition_step}}"
          - delay: "00:00:00.1"

      - conditions:
          - condition: template
            value_template: "{{ v__is_active_day and v__s | as_datetime <= v__now | as_datetime and v__now | as_datetime < v__e | as_datetime }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ v__entity_id }}"
            data:
              brightness_pct: "{{ v__brightness_percent | int }}"
              color_temp_kelvin: "{{ v__color_temp_kelvin | int }}"
              transition: "{{ v__transition_step }}"
          - delay: "00:00:00.1"
